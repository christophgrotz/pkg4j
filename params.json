{"name":"Pkg4j","tagline":"Java library for creating OS specific packages.","body":"# pkg4j\r\n\r\nJava library for creating OS specific packages.\r\n\r\n## How to build\r\n\r\nThis project is uses [Gradle](http://gradle.org) as the build tool. For build you need clone source code and simply run one command. All magic will happed automatically.\r\n\r\n```shell\r\ngit clone git@github.com:jamel/pkg4j.git\r\ncd pkg4j\r\n./gradlew build\r\n```\r\n\r\n## Dependencies from your project\r\n\r\n### Maven dependency\r\n\r\nIf you are using [Maven](http://maven.apache.org) as build tool for your project, simply add this dependency to your pom.xml.\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.jamel.pkg4j</groupId>\r\n    <artifactId>pkg4j-core</artifactId>\r\n    <version>0.0.1</version>\r\n</dependency>\r\n```\r\n\r\n### Gradle dependency\r\n\r\nFor [Gradle](http://gradle.org) projects it is even simpler. Make sure that your dependency block looks like:\r\n\r\n```groovy\r\ndependencies {\r\n   compile \"org.jamel.pkg4j:pkg4j-core:0.0.1\"\r\n   // ... other dependencies\r\n}\r\n```\r\n\r\n## How to use\r\n\r\nFor build .deb or .rpm packages you have to write simple code like this:\r\n\r\n```java\r\n// (1) create package information\r\nPackage pkgInfo = Package.create()\r\n        .name(\"supper-app\")\r\n        .version(\"0.0.1\")\r\n        .author(\"Donald Duck\")\r\n        .email(\"the@donald.duck\")\r\n        .description(\"My brand new cool app for ducks\")\r\n        .dependsOn(Depends.many()\r\n                .on(\"duck-daemon (>= 0.12.1)\")\r\n                .on(\"default-jre\")\r\n                .build())\r\n        .content(Content.create()\r\n                .pack(\"src/bin\", \"/usr/local/bin\", 0744)\r\n                .pack(\"src/etc\", \"/etc/supper-app\")\r\n                .pack(\"target/report.txt\", \"/var/cache/supper-app\", \"app-user\", 0644)\r\n                .build())\r\n        .changeLog(ChangeLog.fromGit())\r\n        .build();\r\n\r\n\r\n// (2) build .deb package and GPG signed .changes file\r\nDebBuilder debBuilder = new DebBuilder(\"target/debs\");\r\nFile deb = debBuilder.build(pkgInfo);\r\nFile changes = Signer.sign(debBuilder.buildChanges(pkgInfo));\r\n\r\n\r\n// (3) build .rpm package\r\nRpmBuilder rpmBuilder = new RpmBuilder(\"target/rpms\");\r\nFile rpm = rpmBuilder.build(pkgInfo);\r\n```\r\n\r\nAnd after run this you will get your packages in target folder.\r\n","google":"UA-39578705-1","note":"Don't delete this file! It's used internally to help with page regeneration."}